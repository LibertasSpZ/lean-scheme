/-
    Sheaf (of categories).

    https://stacks.math.columbia.edu/tag/006S
-/

import sheaves.covering.covering
import sheaves_of_categories.presheaf
import category_theory.limits.shapes.products
import category_theory.limits.shapes.equalizers

universes v u

open topological_space lattice category_theory

variables {X : Type v} [topological_space X]
variables {C : Type u} [ùíû : category.{v} C]
include ùíû

instance XYZ: has_coe_to_fun (presheaf X C) :=
{F := Œª (‚Ñ± : presheaf X C), opens X ‚Üí C, coe := presheaf.val}

-- Restriction map from U to U ‚à© V.

set_option pp.universes true

namespace topological_space.presheaf

def res_to_inter_left (‚Ñ± : presheaf X C) (U V : opens X)
: ((‚Ñ± : opens X ‚Üí C) U) ‚ü∂ ((‚Ñ± : opens X ‚Üí C) (U ‚à© V)) :=
‚Ñ±.res' (set.inter_subset_left U V)

-- Restriction map from V to U ‚à© V.

def res_to_inter_right (‚Ñ± : presheaf X C) (U V : opens X)
: ((‚Ñ± : opens X ‚Üí C) V) ‚ü∂ ((‚Ñ± : opens X ‚Üí C) (U ‚à© V)) :=
‚Ñ±.res' (set.inter_subset_right U V)

open category_theory.limits

variable [has_products.{v} C]

def prod_res (‚Ñ± : presheaf X C) {U : opens X} (OC : covering U) :
  ‚Ñ± U ‚ü∂ ‚àè (Œª i, ‚Ñ±.val (OC.Uis i)) :=
pi.lift (Œª i, ‚Ñ±.res' $ subset_covering i)

variable [has_equalizers.{v} C]

-- the canonical map from ‚Ñ± U to the equalizer of Œ† ‚Ñ± (U_i) ‚Üí Œ† ‚Ñ± (U_j ‚à© U_k)
def map_to_equalizer (‚Ñ± : presheaf X C) {U : opens X} (OC : covering U) :
  ‚Ñ± U ‚ü∂ _ :=
equalizer.lift
(pi.lift.{v} (Œª jk : OC.Œ≥ √ó OC.Œ≥, ((pi.œÄ (Œª i, ‚Ñ± (OC.Uis i)) jk.1) ‚â´
(‚Ñ±.res_to_inter_left (OC.Uis jk.1 : opens X) (OC.Uis jk.2 : opens X)
-- why do I need to say this
  : ‚Ñ± (OC.Uis (jk.fst)) ‚ü∂ ‚Ñ± (OC.Uis (jk.fst) ‚à© OC.Uis (jk.snd))
))))
(pi.lift (Œª jk : OC.Œ≥ √ó OC.Œ≥, ((pi.œÄ (Œª i, ‚Ñ±.val (OC.Uis i)) jk.2) ‚â´
(‚Ñ±.res_to_inter_right _ _))))
(pi.lift (Œª i, ‚Ñ±.res' $ subset_covering i)
-- why do I need to say this
    : ‚Ñ± U ‚ü∂ ‚àè (Œª i, ‚Ñ±.val (OC.Uis i)
))
begin
  ext jk,
  suffices : presheaf.res'.{v u} ‚Ñ± (subset_covering.{v} (jk.fst)) ‚â´
      topological_space.presheaf.res_to_inter_left.{v u} ‚Ñ± (OC.Uis (jk.fst)) (OC.Uis (jk.snd)) =
    presheaf.res'.{v u} ‚Ñ± (subset_covering.{v} (jk.snd)) ‚â´
      topological_space.presheaf.res_to_inter_right.{v u} ‚Ñ± (OC.Uis (jk.fst)) (OC.Uis (jk.snd)),
    dsimp, simpa using this, -- non-terminal dsimp
  convert (rfl : ‚Ñ±.res' (show OC.Uis jk.1 ‚à© OC.Uis jk.2 ‚äÜ U, from _) = ‚Ñ±.res' _),
    exact (‚Ñ±.Hcomp' _ _ _ _ _).symm,
  exact (‚Ñ±.Hcomp' _ _ _ _ _).symm,
end

#check topological_space.presheaf.map_to_equalizer

end topological_space.presheaf

-- Sheaf condition.

section sheaf_condition

open category_theory.limits

variable [has_products.{v} C]

-- this was a monumental effort.
-- Why not just
-- mono (pi.lift (Œª i, (‚Ñ±.res' (subset_covering i))))

def locality (‚Ñ± : presheaf X C) : Prop :=
‚àÄ {U : opens X} (OC : covering.{v} U),
mono (‚Ñ±.prod_res OC)

--example (‚Ñ± : presheaf X C) {U : opens X} (OC : covering U) : C := ‚àè (Œª i, ‚Ñ±.val (OC.Uis i))
--example (‚Ñ± : presheaf X C) {U : opens X} (OC : covering U) : C :=
--  ‚àè (Œª jk : OC.Œ≥ √ó OC.Œ≥, ‚Ñ±.val (OC.Uis jk.1 ‚à© OC.Uis jk.2))

variable [has_equalizers.{v} C]

--example (‚Ñ± : presheaf X C) {U : opens X} (OC : covering U) :
--   ‚àè (Œª i, ‚Ñ±.val (OC.Uis i)) ‚ü∂
--   ‚àè (Œª jk : OC.Œ≥ √ó OC.Œ≥, ‚Ñ±.val (OC.Uis jk.1 ‚à© OC.Uis jk.2)) :=
--pi.lift (Œª jk : OC.Œ≥ √ó OC.Œ≥, ((pi.œÄ (Œª i, ‚Ñ±.val (OC.Uis i)) jk.1) ‚â´
--(‚Ñ±.res_to_inter_left _ _)))

--example (‚Ñ± : presheaf X C) {U : opens X} (OC : covering U) :
--   ‚àè (Œª i, ‚Ñ±.val (OC.Uis i)) ‚ü∂
--   ‚àè (Œª jk : OC.Œ≥ √ó OC.Œ≥, ‚Ñ±.val (OC.Uis jk.1 ‚à© OC.Uis jk.2)) :=
--pi.lift (Œª jk : OC.Œ≥ √ó OC.Œ≥, ((pi.œÄ (Œª i, ‚Ñ±.val (OC.Uis i)) jk.2) ‚â´
--(‚Ñ±.res_to_inter_right _ _)))

def gluing (‚Ñ± : presheaf X C) : Prop :=
‚àÄ {U : opens X} (OC : covering U),
epi (-- the map from ‚Ñ±(U) to the equalizer of the two res maps : Œ† i, ‚Ñ±(U_i) ‚Üí Œ†_{j,k}(‚Ñ±(U_jk})
--coming from the fact that res res = res = res res
‚Ñ±.map_to_equalizer OC)

end sheaf_condition

-- Definition of a sheaf of types.

open category_theory.limits

variable [has_products.{v} C]
variable [has_equalizers.{v} C]

structure sheaf (X : Type v) [topological_space X]
extends presheaf X C :=
(locality : locality to_presheaf)
(gluing   : ‚àÄ {U : opens X} (OC : covering U), gluing to_presheaf)

def is_sheaf (F : presheaf X C) :=
locality F ‚àß gluing F

def is_sheaf_def (‚Ñ± : presheaf X C) (h : is_sheaf ‚Ñ±) {U : opens X} (OC : covering U) :
  is_iso (‚Ñ±.prod_res OC) :=
{ inv := begin -- data
    cases h,
    replace h_left := h_left OC,
    replace h_right := h_right OC,
    sorry
  end,
  hom_inv_id' := sorry,
  inv_hom_id' := sorry }
