/-
    Sheaf (of categories).

    https://stacks.math.columbia.edu/tag/006S
-/

import sheaves.covering.covering
import sheaves_of_categories.presheaf
import category_theory.limits.shapes.products
import category_theory.limits.shapes.equalizers

universes v u

open topological_space lattice category_theory

variables {X : Type v} [topological_space X]
variables {C : Type u} [ùíû : category.{v} C]
include ùíû

instance XYZ: has_coe_to_fun (presheaf X C) :=
{F := Œª (‚Ñ± : presheaf X C), opens X ‚Üí C, coe := presheaf.val}

namespace topological_space.presheaf

def res_to_inter_left (‚Ñ± : presheaf X C) (U V : opens X)
: ((‚Ñ± : opens X ‚Üí C) U) ‚ü∂ ((‚Ñ± : opens X ‚Üí C) (U ‚à© V)) :=
‚Ñ±.res (set.inter_subset_left U V)

-- Restriction map from V to U ‚à© V.

def res_to_inter_right (‚Ñ± : presheaf X C) (U V : opens X)
: ((‚Ñ± : opens X ‚Üí C) V) ‚ü∂ ((‚Ñ± : opens X ‚Üí C) (U ‚à© V)) :=
‚Ñ±.res (set.inter_subset_right U V)

open category_theory.limits

variable [has_products.{v} C]

def prod_res (‚Ñ± : presheaf X C) {U : opens X} (OC : covering U) :
  ‚Ñ± U ‚ü∂ ‚àè (Œª i, ‚Ñ±.val (OC.Uis i)) :=
pi.lift (Œª i, ‚Ñ±.res $ subset_covering i)

def res_left (‚Ñ± : presheaf X C) {U : opens X} (OC : covering U) :
  ‚àè (Œª i, ‚Ñ±.val (OC.Uis i)) ‚ü∂ ‚àè (Œª jk : OC.Œ≥ √ó OC.Œ≥, ‚Ñ±.val (OC.Uis jk.1 ‚à© OC.Uis jk.2)) :=
(pi.lift (Œª jk : OC.Œ≥ √ó OC.Œ≥, ((pi.œÄ (Œª i, ‚Ñ± (OC.Uis i)) jk.1) ‚â´
(‚Ñ±.res_to_inter_left _ _))))

def res_right (‚Ñ± : presheaf X C) {U : opens X} (OC : covering U) :
  ‚àè (Œª i, ‚Ñ±.val (OC.Uis i)) ‚ü∂ ‚àè (Œª jk : OC.Œ≥ √ó OC.Œ≥, ‚Ñ±.val (OC.Uis jk.1 ‚à© OC.Uis jk.2)) :=
(pi.lift (Œª jk : OC.Œ≥ √ó OC.Œ≥, ((pi.œÄ (Œª i, ‚Ñ±.val (OC.Uis i)) jk.2) ‚â´
(‚Ñ±.res_to_inter_right _ _))))

variable [has_equalizers.{v} C]

lemma res_commutes (‚Ñ± : presheaf X C) {U : opens X} (OC : covering U) :
  prod_res ‚Ñ± OC ‚â´ res_left ‚Ñ± OC = prod_res ‚Ñ± OC ‚â´ res_right ‚Ñ± OC :=
begin
  unfold res_left, -- why?
  unfold res_right, -- why?
  unfold prod_res,
  ext jk,
  -- carefully avoiding non-terminal simp
  suffices : ‚Ñ±.res.{v u} (subset_covering.{v} (jk.fst)) ‚â´
      ‚Ñ±.res_to_inter_left.{v u} (OC.Uis (jk.fst)) (OC.Uis (jk.snd)) =
    ‚Ñ±.res.{v u} (subset_covering.{v} (jk.snd)) ‚â´
      ‚Ñ±.res_to_inter_right.{v u} (OC.Uis (jk.fst)) (OC.Uis (jk.snd)),
    dsimp, simpa using this, -- non-terminal dsimp
  convert (rfl : ‚Ñ±.res (show OC.Uis jk.1 ‚à© OC.Uis jk.2 ‚äÜ U, from _) = ‚Ñ±.res _),
    exact (‚Ñ±.Hcomp _ _).symm,
  exact (‚Ñ±.Hcomp _ _).symm,
end

-- the canonical map from ‚Ñ± U to the equalizer of Œ† ‚Ñ± (U_i) ‚Üí Œ† ‚Ñ± (U_j ‚à© U_k)
def map_to_equalizer (‚Ñ± : presheaf X C) {U : opens X} (OC : covering U) :
  ‚Ñ± U ‚ü∂ _ :=
equalizer.lift
(‚Ñ±.res_left OC)
(‚Ñ±.res_right OC)
(‚Ñ±.prod_res OC)
(‚Ñ±.res_commutes OC)

-- Sheaf condition.

section sheaf_condition

open category_theory.limits

variable [has_products.{v} C]

-- I'm not sure how relevant this is now; sheaf axiom is that something is an isomorphism,
-- not just mono and epi
def locality (‚Ñ± : presheaf X C) : Prop :=
‚àÄ {U : opens X} (OC : covering.{v} U),
mono (‚Ñ±.prod_res OC)

variable [has_equalizers.{v} C]

def gluing (‚Ñ± : presheaf X C) : Prop :=
‚àÄ {U : opens X} (OC : covering U),
epi (‚Ñ±.map_to_equalizer OC)

/-- creates the cone with vertex ‚Ñ± U for the equalizer diagram -/
def to_fork (‚Ñ± : presheaf X C) {U : opens X} (OC : covering U) :
  fork (‚Ñ±.res_left OC) (‚Ñ±.res_right OC) :=
fork.of_Œπ (‚Ñ±.prod_res OC) (‚Ñ±.res_commutes OC)

end sheaf_condition

end topological_space.presheaf

-- Definition of a sheaf of objects in a category.

open category_theory.limits

namespace topological_space

variable [has_products.{v} C]
variable [has_equalizers.{v} C]

omit ùíû

-- this is data
structure sheaf (X : Type v) [topological_space X] (C : Type u) [category.{v} C]
  [has_products.{v} C] [has_equalizers.{v} C]
extends presheaf X C :=
(is_limit : ‚àÄ {U : opens X} (OC : covering U),
   is_limit (topological_space.presheaf.to_fork to_presheaf OC))

include ùíû

instance : has_coe_to_fun (sheaf X C) :=
{ F := Œª ‚Ñ±, opens X ‚Üí C,
  coe := Œª ‚Ñ±, topological_space.sheaf.to_presheaf ‚Ñ±}

namespace sheaf

def map_to_equalizer (‚Ñ± : sheaf X C) {U : opens X} (OC : covering U) :=
  (‚Ñ±.to_presheaf).map_to_equalizer OC

instance : category (sheaf X C) :=
{ hom := Œª ‚Ñ± ùí¢, ‚Ñ±.to_presheaf ‚ü∂ ùí¢.to_presheaf,
  id := Œª ‚Ñ±, ùüô (‚Ñ±.to_presheaf),
  comp := Œª ‚Ñ± ùí¢ ‚Ñã f g, f ‚â´ g,
  id_comp' := by simp,
  comp_id' := by simp,
  assoc' := by intros;simp }

end sheaf

end topological_space

open topological_space

variable [has_products.{v} C]
variable [has_equalizers.{v} C]

-- this is no longer right: monic and epi don't imply iso
--def is_sheaf (F : presheaf X C) :=
--locality F ‚àß gluing F

def condition (‚Ñ± : sheaf X C) {U : opens X} (OC : covering U) :
  ‚Ñ±.to_presheaf.to_fork OC ‚âÖ
    (limit.cone (parallel_pair (‚Ñ±.to_presheaf.res_left OC) (‚Ñ±.to_presheaf.res_right OC))) :=
is_limit.unique_up_to_iso (‚Ñ±.is_limit OC) (limit.is_limit _)
