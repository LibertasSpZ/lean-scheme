import sheaves_of_categories.sheaf
import category_theory.full_subcategory

-- ùüô is \b1 and ùü≠ who knows

/-!
pushforwards and pullbacks for presheaves and maybe sheaves too
-/

universes v u

open topological_space lattice category_theory

variables {X Y : Type v} [topological_space X] [topological_space Y]
variables {C : Type u} [ùíû : category.{v} C]
variables (f : X ‚Üí Y) (hf : continuous f)
include ùíû

instance : preorder (opens X) := by apply_instance
--instance : small_category (opens X) := by apply_instance -- :-( -- wrong way
def small_category {Œ± : Type v} [preorder Œ±] : small_category Œ± :=
{ hom  := Œª U V, ulift (plift (V ‚â§ U)),
  id   := Œª X, ‚ü® ‚ü® le_refl X ‚ü© ‚ü©,
  comp := Œª _ _ _ f g, ‚ü® ‚ü® le_trans g.down.down f.down.down ‚ü© ‚ü© }

-- need to beat 100 to have an effect
local attribute [instance, priority 200] small_category

--instance : category (presheaf X C) := topological_space.presheaf.category
--instance foo : category (presheaf Y C) := topological_space.presheaf.category

--set_option trace.class_instances true
def map (f : X ‚Üí Y) (hf : continuous f) : presheaf X C ‚•§ presheaf Y C :=
{ obj := Œª ‚Ñ±, {
    val := Œª _, ‚Ñ± (hf.comap _),
    res := Œª _ _ hV, ‚Ñ±.res' (Œª _ hv, hV hv),
    Hid := Œª _, ‚Ñ±.Hid _,
    Hcomp := Œª _ _ _ _ _, ‚Ñ±.Hcomp _ _ _ _ _},
  map := Œª ‚Ñ± ùí¢ œÜ,{
    map := Œª V, œÜ (continuous.comap hf V),
    commutes := Œª _ _ _, œÜ.commutes _ _ _},
  map_id' := by intros; split,
  map_comp' := by intros; split }

-- todo: pushforward of a sheaf should be a sheaf

--example (X Y : Type) {f : X ‚Üí Y}
--  (U : set X) (V : set Y) : f '' U ‚äÜ V ‚Üî U ‚äÜ f ‚Åª¬π' V := easy

namespace topological_space.presheaf

/-- The functor induced by ‚Ñ± on the opens containing a subset of X -/
def to_aux_functor (‚Ñ± : presheaf X C) (Y : set X)
  : {V : opens X // Y ‚äÜ V} ‚•§ C :=
{ obj := Œª V, ‚Ñ± V,
        map := Œª V‚ÇÅ V‚ÇÇ j, ‚Ñ±.res' j.1.1,
        map_id' := Œª _, ‚Ñ±.Hid _,
        map_comp' := Œª _ _ _ _ _, ‚Ñ±.Hcomp _ _ _ _ _}

variable [limits.has_colimits.{v} C]
def aux_cocone (‚Ñ± : presheaf X C) (Y : set X) : limits.cocone (‚Ñ±.to_aux_functor Y) :=
limits.colimit.cocone (‚Ñ±.to_aux_functor Y)

def aux_colimit (‚Ñ± : presheaf X C) (Y : set X) : C :=
(‚Ñ±.aux_cocone Y).X

def res_functor {Y‚ÇÅ Y‚ÇÇ : set X} (hY : Y‚ÇÇ ‚äÜ Y‚ÇÅ) :
    {V : opens X // Y‚ÇÅ ‚äÜ V} ‚•§ {V : opens X // Y‚ÇÇ ‚äÜ V} :=
{ obj := Œª V, ‚ü®V.1, set.subset.trans hY V.2‚ü©,
  map := Œª _ _, id}

example (‚Ñ± : presheaf X C) {Y‚ÇÅ Y‚ÇÇ : set X} (hY : Y‚ÇÇ ‚äÜ Y‚ÇÅ) :
  res_functor hY ‚ãô ‚Ñ±.to_aux_functor Y‚ÇÇ = ‚Ñ±.to_aux_functor Y‚ÇÅ := rfl -- :-)

#print prefix category_theory.functor
#check category_theory.functor.mk.inj_eq

example (‚Ñ± : presheaf X C) {Y : set X} :
  res_functor (show Y ‚äÜ Y, by refl) = ùü≠ _ := -- rfl fails :-()
begin
  unfold res_functor,
  unfold category_theory.functor.id,
  rw category_theory.functor.mk.inj_eq, -- is there an ext lemma missing?
  split,
    ext, apply subtype.eq, refl,
  apply heq_of_eq,
  ext,
end


-- I should only need filtered colimits
def comap {f : X ‚Üí Y} (hf : continuous f) : presheaf Y C ‚•§ presheaf X C :=
{ obj := Œª ‚Ñ±,
  { val := Œª U, ‚Ñ±.aux_colimit (f '' U),
    res := Œª U‚ÇÅ U‚ÇÇ hU,
      limits.colimit.pre (‚Ñ±.to_aux_functor _) (res_functor $ set.image_subset _ hU),
    Hid := Œª U, begin
      show limits.colimit.pre (to_aux_functor ‚Ñ± (f '' U.val)) (res_functor _) = ùüô (aux_colimit ‚Ñ± (f '' ‚ÜëU)),
    ext, tidy,  sorry end,
    Hcomp := begin intros, ext, tidy, sorry end },
  map := Œª ‚Ñ± ùí¢ œÜ,
  { map := Œª U, sorry,
    commutes := sorry },
  map_id' := sorry,
  map_comp' := sorry }

end topological_space.presheaf
