import sheaves_of_categories.sheaf
import category_theory.full_subcategory

universes v u

open topological_space lattice category_theory

variables {X Y : Type v} [topological_space X] [topological_space Y]
variables {C : Type u} [ùíû : category.{v} C]
variables (f : X ‚Üí Y) (hf : continuous f)
include ùíû

instance : preorder (opens X) := by apply_instance

instance small_category {Œ± : Type v} [preorder Œ±] : small_category Œ± :=
{ hom  := Œª U V, ulift (plift (V ‚â§ U)),
  id   := Œª X, ‚ü® ‚ü® le_refl X ‚ü© ‚ü©,
  comp := Œª X Y Z f g, ‚ü® ‚ü® le_trans g.down.down f.down.down ‚ü© ‚ü© }

attribute [instance, priority 200] small_category

--instance : category (presheaf X C) := topological_space.presheaf.category
--instance foo : category (presheaf Y C) := topological_space.presheaf.category

--set_option trace.class_instances true
def map (f : X ‚Üí Y) (hf : continuous f) : presheaf X C ‚•§ presheaf Y C :=
{ obj := Œª ‚Ñ±, {
    val := Œª _, ‚Ñ± (hf.comap _),
    res := Œª _ _ hV, ‚Ñ±.res' (Œª _ hv, hV hv),
    Hid := Œª _, ‚Ñ±.Hid _,
    Hcomp := Œª _ _ _ _ _, ‚Ñ±.Hcomp _ _ _ _ _},
  map := Œª ‚Ñ± ùí¢ œÜ,{
    map := Œª V, œÜ (continuous.comap hf V),
    commutes := Œª _ _ _, œÜ.commutes _ _ _},
  map_id' := by intros; split,
  map_comp' := by intros; split }

-- todo: pushforward of a sheaf should be a sheaf

example (X Y : Type) {f : X ‚Üí Y}
  (U : set X) (V : set Y) : f '' U ‚äÜ V ‚Üî U ‚äÜ f ‚Åª¬π' V :=
begin
  split,
    intro h,
    intros u hu,
    apply h,
    use u,
    split, assumption, refl,
  rintros h v ‚ü®u, hu, rfl‚ü©,
  apply h,
  assumption
end

variable [limits.has_colimits.{v} C]
def comap {f : X ‚Üí Y} (hf : continuous f) : presheaf Y C ‚•§ presheaf X C :=
{ obj := Œª ‚Ñ±, {
    val := Œª U, limits.colimit (
      { obj := Œª V, ‚Ñ± V,
        map := Œª V‚ÇÅ V‚ÇÇ j, ‚Ñ±.res' j.1.1,
        map_id' := Œª _, ‚Ñ±.Hid _,
        map_comp' := Œª _ _ _ _ _, ‚Ñ±.Hcomp _ _ _ _ _} :
          {V : opens Y // U ‚äÜ hf.comap V} ‚•§ C), -- colimit of ‚Ñ±(V) as V runs through the opens containing f(U)
    res := Œª U‚ÇÅ U‚ÇÇ hU, _,--category_theory.limits.colimit.desc _ _,
    Hid := _,
    Hcomp := _ } ,
  map := _,
  map_id' := _,
  map_comp' := _ }
